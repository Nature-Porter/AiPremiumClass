{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"},"kaggle":{"accelerator":"none","dataSources":[],"isInternetEnabled":true,"language":"python","sourceType":"script","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import torch\nfrom torch.utils.data import Dataset,DataLoader\nfrom torch.nn.utils.rnn import pad_sequence\nimport torch.nn.functional as F\n\n#1、构建词典\ndef build_vocab(token_lists):\n    vocab={'<pad>':0,'<s>':1,'</s>':2}\n    idx=3\n    for tokens in token_lists:\n        for t in tokens:\n            if t not in vocab:\n                vocab[t]=idx\n                idx+=1\n\n    return vocab\n##数据集\nclass MyDataset(Dataset):\n    def __init__(self,enc_tokens,dec_tokens,enc_vocab,dec_vocab):\n        self.enc_tokens=enc_tokens\n        self.dec_tokens=dec_tokens\n        self.enc_vocab=enc_vocab\n        self.dec_vocab=dec_vocab\n\n    def __len__(self):\n        return len(self.enc_tokens)\n\n    def __getitem__(self,idx):\n        enc=[self.enc_vocab[t] for t in self.enc_tokens[idx]]\n        dec=[self.dec_vocab[t] for t in self.dec_tokens[idx]]\n        return torch.tensor(enc,dtype=torch.long),torch.tensor(dec,dtype=torch.long)\n       \ndef collate_fn(batch):\n    enc_batch,dec_batch=zip(*batch)\n    enc_batch=pad_sequence(enc_batch,batch_first=True,padding_value=0)\n    ##dec_in:去掉最后一个\n    dec_in=[dec[:-1] for dec in dec_batch]\n    dec_in=pad_sequence(dec_in,batch_first=True,padding_value=0)\n    #dec_out:去掉第一个\n    dec_out=[dec[1:] for dec in dec_batch]\n    dec_out=pad_sequence(dec_out,batch_first=True,padding_value=0)\n \n    return enc_batch,dec_in,dec_out\n\n##4 mask\ndef generate_square_subsequent_mask(sz):\n    mask=torch.triu(torch.ones(sz,sz)*float('-inf'),diagonal=1)\n    return mask\n                \n","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"outputs":[],"execution_count":null}]}